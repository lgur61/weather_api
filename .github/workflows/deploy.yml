name: CI/CD with Terraform

on:
  push:
    paths:
      - 'nodeapp/**'

env:
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }} 
  AWS_REGION: us-east-1
  AWS_ECR_REPO_NAME: node-web-app

jobs:
  deploy-app:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3    
      - name: Login to AWS ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      - name: Create ECR Repository
        uses: int128/create-ecr-repository-action@v1
        id: ecr
        with:
          repository: ${{ env.AWS_ECR_REPO_NAME }}
          public: false
      - name: Build, push docker image
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: ${{ env.AWS_ECR_REPO_NAME }}
          IMAGE_TAG: ${{ github.sha }}
        run: |-         
          docker build -t $REGISTRY/$REPOSITORY:$IMAGE_TAG .
          docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG
        working-directory: ./nodeapp
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_wrapper: false
      - name: Terraform init
        id: init
        run: terraform init 
        working-directory: ./terraform/3-application
      - name: Terraform Plan
        id: plan
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: ${{ env.AWS_ECR_REPO_NAME }}
          IMAGE_TAG: ${{ github.sha }}     
        run: |-
          terraform plan \
          -var-file="production.tfvars" \
          -var="docker_image_url=$REGISTRY/$REPOSITORY:$IMAGE_TAG" \
          -out=PLAN
        working-directory: ./terraform/3-application     
      - name: Terraform Apply
        id: apply
        run: terraform apply PLAN
        working-directory: ./terraform/3-application
